// MIT License

// Copyright (c) 2025 ramsy0dev

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// file: std/math.mv
// description: Math library


// --------------------------------------- //
//                Constants                //
// --------------------------------------- //
const Pi[]  : float = 3.14159265358979323846;          // Pi: Ratio of a circle's circumference to its diameter. 
const Tau[] : float = 6.28318530717958647692;          // Tau: Ratio of a circle's circumference to its radius. Equal to 2Pi
const PHI[] : float = 1.61803398874989484820;          // Phi Golden Ratio: (1 + sqrt(5))/2
const SILVER_RATIO[]: float = 2.41421356237309504880;  // sqrt(2) + 1

// --------------------------------------- //
//           Functions declarations        //
// --------------------------------------- //
fn abs(x: [int, float]) -> [int, float];
fn sqrt(x: [int, float]) -> [int, float];


// --------------------------------------- //
//          Functions implementation       //
// --------------------------------------- //
fn abs(x: [int, float]) -> [int, float] {
    // Absolute value of x.
    if (x < 0) {
        return -x;
    }
    return x;
}

fn sqrt(x: [int, float]) -> float {
    // Square root of x.
    // This implementation uses' Newton's method for sqrt
    // Formula: X(k+1) = (1/2)*(x_k+(n/x_k))
    
    // Negative numbers
    if (x < 0) {
        return;
    }

    if (x == 0) {
        return 0;
    }

    const tolerance[]: float = 1e-10;
    var n[]: float = x / 2.0;

    while (TRUE) {
        n_next = 0.5 * (x + n / x);

        if (abs(n_next - n) < tolerance) {
            return n_next;
        }

        n = n_next;
    }
}
